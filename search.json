[
  {
    "objectID": "tutorials/data-pipelines.html",
    "href": "tutorials/data-pipelines.html",
    "title": "Data pipelines",
    "section": "",
    "text": "test"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Get Started",
    "section": "",
    "text": "In this tutorial we’ll show you how to use Quarto with VS Code. Before getting started, you should install the Quarto VS Code Extension, which includes many tools that enhance working with Quarto, including:\n---\ntitle: \"Quarto Basics\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---"
  },
  {
    "objectID": "tutorials/index.html#step-2",
    "href": "tutorials/index.html#step-2",
    "title": "Get Started",
    "section": "Step 2",
    "text": "Step 2\n\nInstall Quarto"
  },
  {
    "objectID": "tutorials/index.html#overview-1",
    "href": "tutorials/index.html#overview-1",
    "title": "Get Started",
    "section": "Overview",
    "text": "Overview\nIn this tutorial we’ll show you how to use Quarto with VS Code. Before getting started, you should install the Quarto VS Code Extension, which includes many tools that enhance working with Quarto, including:\n\nIntegrated render and preview for Quarto documents.\nSyntax highlighting for markdown and embedded languages\nCompletion and diagnostics for YAML options\nCompletion for embedded languages (e.g. Python, R, Julia, etc.)\nCommands and key-bindings for running cells and selected lines.\n\nYou can install the Quarto extension from within the Extensions tab in VS Code, from the Extension Marketplace, the Open VSX Registry or directly from a VISX extension file.\n\n\n\n\n\n\nNote\n\n\n\nThis tutorial focuses on editing plain text Quarto .qmd files in VS Code. You can alternatively use the VS Code Notebook Editor if you prefer to work with .ipynb files.\nFor the purposes of learning we recommend you follow along with the .qmd examples. At the end of this article there is a link to documentation on using the Notebook Editor with Quarto that will apply what you’ve learned to notebooks.\n\n\n\nBasic Workflow\nQuarto .qmd files contain a combination of markdown and executable code cells. Here’s what it might look like in VS Code to edit and preview a .qmd file:\nThe window on the left is a qmd file opened in VSCode. The contents of this document are the same as the first part of the Getting Started: Welcome section of this website. The contents of this document are rendered by Quarto in the window on the right.”}\nThe document on the left is rendered into the HTML version you see on the right. This is the basic model for Quarto publishing—take a source document and render it to a variety of output formats, including HTML, PDF, MS Word, etc.\nThe tutorials will make use of the matplotlib and plotly Python packages—the commands you can use to install them are given in the table below.\n\n\n\n\n\n\nNote\n\n\n\nNote that while this tutorial uses Python, using Julia (via the IJulia kernel) is also well supported. See the article on Using Julia for additional details."
  },
  {
    "objectID": "tutorials/index.html#render-and-preview",
    "href": "tutorials/index.html#render-and-preview",
    "title": "Get Started",
    "section": "Render and Preview",
    "text": "Render and Preview\nWe’ll start out by rendering a simple example (hello.qmd) to a couple of formats. If you want to follow along step-by-step in your own environment, create a new file named hello.qmd and copy the following content into it.\n---\ntitle: \"Quarto Basics\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\ntest"
  },
  {
    "objectID": "tutorials/containers.html",
    "href": "tutorials/containers.html",
    "title": "Containers",
    "section": "",
    "text": "test"
  },
  {
    "objectID": "updates.html",
    "href": "updates.html",
    "title": "Updates",
    "section": "",
    "text": "RAP Maturity Framework\n\n\n\n\n\n\n\nNHS\n\n\nRAP\n\n\n\n\nQuarto Markdown Publishing & RAP Maturity\n\n\n\n\n\n\nDec 11, 2022\n\n\nCraig R Shenton\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\nMy First Post\n\n\n\n\n\n\nDec 11, 2022\n\n\nCraig R Shenton\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About {Rapdown}",
    "section": "",
    "text": "Craig Robert Shenton, PhD author, maintainer, copyright holder."
  },
  {
    "objectID": "about.html#licence",
    "href": "about.html#licence",
    "title": "About {Rapdown}",
    "section": "Licence",
    "text": "Licence\nMIT License, see LICENSE.md"
  },
  {
    "objectID": "about.html#citation",
    "href": "about.html#citation",
    "title": "About {Rapdown}",
    "section": "Citation",
    "text": "Citation\nShenton, C. R. Rapdown: A framework for creating Reproducible Analytical Pipeline (RAP) compliant Quarto publications (2022). At <https://github.com/craig-shenton/RAPdown>.\n@Manual{rapdown2022,\n  title  = {Rapdown: A framework for creating Reproducible Analytical Pipeline (RAP) compliant Quarto publications},\n  author = {Craig Robert Shenton},\n  url = {https://github.com/craig-shenton/RAPdown},\n  year = {2022},\n}"
  },
  {
    "objectID": "about.html#references",
    "href": "about.html#references",
    "title": "About {Rapdown}",
    "section": "References",
    "text": "References\n\n\n1. Landau, W. M. Tarchetypes: Archetypes for targets. (2021). at <https://docs.ropensci.org/tarchetypes/>\n\n\n2. Shenton, C. R. Rapdown: A framework for creating reproducible analytical pipeline (RAP) compliant quarto publications. (2022). at <https://github.com/craig-shenton/RAPdown>\n\n\n3. Wickham, H., François, R., Henry, L. & Müller, K. Dplyr: A grammar of data manipulation. (2022). at <https://dplyr.tidyverse.org>"
  },
  {
    "objectID": "documentation/dplyr-functions.html",
    "href": "documentation/dplyr-functions.html",
    "title": "Dplyr Functions",
    "section": "",
    "text": "Source: utilites/dplyr_format_date.R\ndplyr_format_date() is function that takes a dataframe and a list of column names as input and applies date formatting options to the specified columns.\ndplyr_format_date <- function(data, cols, date_format) {\n  data %>%\n    dplyr::mutate_at(dplyr::vars(cols), function(x) {\n      as.character(format(as.Date(x), date_format))\n    })\n}\n\n\ndplyr_format_date(data, cols, date_format)\n\n\n\ndata: A dataframe, or dataframe extension (e.g. a tibble)\ncols: A column name (or list of column names) in the dataframe that will be formatted.\ndate_format: A date format string (e.g., \"%b-%y\"), see table Table 1.\n\n\nTable 1: Date format strings\n\n\nSymbol\nDefinition\nExample\n\n\n\n\n%d\nDay as a number\n19\n\n\n%a\nAbbreviated weekday\nSun\n\n\n%A\nUnabbreviated weekday\nSunday\n\n\n%m\nMonth as a number\n04\n\n\n%b\nAbbreviated month\nFeb\n\n\n%B\nUnabbreviated month\nFebruary\n\n\n%y\n2-digit year\n14\n\n\n%Y\n4-digit year\n2014\n\n\n\n\nSource: www.statology.org\n\n\n\nOther dplyr functions: utilites/dplyr_format_num.R, utilites/dplyr_filter_cols.R\n\n\n\n# Format date column as abbreviated month (%b) - 2-digit year (%y)\nlibrary(dplyr)\nsource(\"utilities/dplyr_format_date.R\")\n\ndf <- data.frame(date = c(\"2022-01-01\",\n                          \"2022-02-01\",\n                          \"2022-03-01\"))\n\nformatted_df <- dplyr_format_date(df, \"date\", \"%b-%y\")\n\nprint(formatted_df)\n#>     date\n#> 1 Jan-22\n#> 2 Feb-22\n#> 3 Mar-22\n\n\n\n\n\n\nSymbol\nDefinition\nExample\n\n\n\n\n%d\nDay as a number\n19\n\n\n%a\nAbbreviated weekday\nSun\n\n\n%A\nUnabbreviated weekday\nSunday\n\n\n%m\nMonth as a number\n04\n\n\n%b\nAbbreviated month\nFeb\n\n\n%B\nUnabbreviated month\nFebruary\n\n\n%y\n2-digit year\n14\n\n\n%Y\n4-digit year\n2014\n\n\n\nSource: www.statology.org"
  },
  {
    "objectID": "posts/rap-maturity/index.html",
    "href": "posts/rap-maturity/index.html",
    "title": "RAP Maturity Framework",
    "section": "",
    "text": "Developed by NHS Digital RAP community.\nThere are three levels:\n\nBaseline - RAP fundamentals offering resilience against future change.\nSilver - Implementing best practice by following good analytical and software engineering standards.\nGold - Analysis as a product to further elevate your analytical work and enhance its reusability to the public."
  },
  {
    "objectID": "posts/rap-maturity/index.html#baseline-rap---getting-the-fundamentals-right",
    "href": "posts/rap-maturity/index.html#baseline-rap---getting-the-fundamentals-right",
    "title": "RAP Maturity Framework",
    "section": "Baseline RAP - getting the fundamentals right",
    "text": "Baseline RAP - getting the fundamentals right\nIn order for a publication to be considered a reproducible analytical pipeline, it must at least meet all of the requirements of Baseline RAP:\n\nData produced by code in an open-source language (e.g., Python, R, SQL).\nCode is version controlled (i.e., Git & GitHub).\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code.\nCode has been peer reviewed (i.e., use PRs and code reviews)\nCode is published in the open and linked to & from accompanying publication (if relevant)."
  },
  {
    "objectID": "posts/rap-maturity/index.html#silver-rap---implementing-best-practice",
    "href": "posts/rap-maturity/index.html#silver-rap---implementing-best-practice",
    "title": "RAP Maturity Framework",
    "section": "Silver RAP - implementing best practice",
    "text": "Silver RAP - implementing best practice\nMeeting all of the above requirements, plus:\n\nOutputs are produced by code with minimal manual intervention.\nCode is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.\nCode is well-organised following standard directory format.\nReusable functions and/or classes are used where appropriate.\nCode adheres to agreed coding standards (e.g., PEP8).\nPipeline includes a testing framework (unit tests, back tests).\nRepository includes package dependency information.\nLogs are automatically recorded by the pipeline to ensure outputs are as expected.\nData is handled and output in a Tidy data format."
  },
  {
    "objectID": "posts/rap-maturity/index.html#gold-rap---analysis-as-a-product",
    "href": "posts/rap-maturity/index.html#gold-rap---analysis-as-a-product",
    "title": "RAP Maturity Framework",
    "section": "Gold RAP - analysis as a product",
    "text": "Gold RAP - analysis as a product\nMeeting all of the above requirements, plus:\n\nCode is fully packaged.\nRepository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g. GitHub Actions.\nProcess runs based on event-based triggers (e.g., new data in database) or on a schedule.\nChanges to the RAP are clearly signposted. E.g. a changelog in the package, releases etc. (See gov.uk info on Semantic Versioning)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my new blog! I’m excited to share my thoughts, ideas, and experiences with you on this platform. This blog will be a place where I can share my passions and interests, as well as provide helpful information and insights on topics that I’m knowledgeable about.\nI’m passionate about many things, but some of the main topics that I’ll be writing about on this blog include technology, data science, and personal development. I’ll be sharing tips and tricks for using new technologies, discussing the latest trends and developments in the field of data science, and offering advice on how to improve your personal and professional skills.\nI hope that you’ll find my blog interesting and informative, and that you’ll come back often to read my latest posts. I welcome your feedback and suggestions, and I’m looking forward to connecting with you and engaging in meaningful discussions on this platform.\nThank you for visiting my blog, and I hope that you’ll enjoy what you read here. Happy reading!\nWritten by ChatGPT."
  }
]